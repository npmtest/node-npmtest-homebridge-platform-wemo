{"/home/travis/build/npmtest/node-npmtest-homebridge-platform-wemo/test.js":"/* istanbul instrument in package npmtest_homebridge_platform_wemo */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-homebridge-platform-wemo/lib.npmtest_homebridge_platform_wemo.js":"/* istanbul instrument in package npmtest_homebridge_platform_wemo */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_homebridge_platform_wemo = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_homebridge_platform_wemo = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-homebridge-platform-wemo/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-homebridge-platform-wemo && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_homebridge_platform_wemo */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_homebridge_platform_wemo\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_homebridge_platform_wemo.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_homebridge_platform_wemo.rollup.js'] =\n            local.assetsDict['/assets.npmtest_homebridge_platform_wemo.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_homebridge_platform_wemo.__dirname + '/lib.npmtest_homebridge_platform_wemo.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-homebridge-platform-wemo/node_modules/homebridge-platform-wemo/index.js":"/* jshint node: true */\n// Wemo Platform Plugin for HomeBridge (https://github.com/nfarina/homebridge)\n//\n// Remember to add platform to config.json. Example:\n// \"platforms\": [\n//      {\n//          \"platform\": \"BelkinWeMo\",\n//          \"name\": \"Belkin WeMo\",\n//          \"noMotionTimer\": 60 // optional: [WeMo Motion only] a timer (in seconds) which is started no motion is detected, defaults to 60\n//      }\n// ],\n\n\"use strict\";\n\nconst DEFAULT_DOOR_OPEN_TIME = 20,\n      DEFAULT_NO_MOTION_TIME = 60;\n\nvar Wemo  = require('wemo-client'),\n    debug = require('debug')('homebridge-platform-wemo');\n\nvar Accessory, Characteristic, Consumption, Service, TotalConsumption, UUIDGen;\nvar wemo = new Wemo();\n\nvar doorOpenTimer, noMotionTimer;\n\nmodule.exports = function (homebridge) {\n    Accessory = homebridge.platformAccessory;\n    Characteristic = homebridge.hap.Characteristic;\n    Service = homebridge.hap.Service;\n    UUIDGen = homebridge.hap.uuid;\n\n    Consumption = function() {\n        Characteristic.call(this, 'Consumption', 'E863F10D-079E-48FF-8F27-9C2605A29F52');\n\n        this.setProps({\n            format: Characteristic.Formats.UINT16,\n            unit: 'W',\n            perms: [Characteristic.Perms.READ, Characteristic.Perms.NOTIFY]\n        });\n\n        this.value = this.getDefaultValue();\n    };\n    require('util').inherits(Consumption, Characteristic);\n\n    Consumption.UUID = 'E863F10D-079E-48FF-8F27-9C2605A29F52';\n\n    TotalConsumption = function() {\n        Characteristic.call(this, 'Total Consumption', 'E863F10C-079E-48FF-8F27-9C2605A29F52');\n\n        this.setProps({\n            format: Characteristic.Formats.UINT32,\n            unit: 'kWh',\n            perms: [Characteristic.Perms.READ, Characteristic.Perms.NOTIFY]\n        });\n\n        this.value = this.getDefaultValue();\n    };\n    require('util').inherits(TotalConsumption, Characteristic);\n\n    TotalConsumption.UUID = 'E863F10C-079E-48FF-8F27-9C2605A29F52';\n\n    homebridge.registerPlatform(\"homebridge-platform-wemo\", \"BelkinWeMo\", WemoPlatform, true);\n};\n\nfunction WemoPlatform(log, config, api) {\n    this.config = config || {};\n\n    if (this.config.ignoredDevices && this.config.ignoredDevices.constructor !== Array) {\n        delete this.config.ignoredDevices;\n    }\n\n    this.ignoredDevices = this.config.ignoredDevices || [];\n\n    var self = this;\n\n    this.api = api;\n    this.accessories = {};\n    this.log = log;\n\n    doorOpenTimer = this.config.doorOpenTimer || DEFAULT_DOOR_OPEN_TIME;\n    noMotionTimer = this.config.noMotionTimer || this.config.no_motion_timer || DEFAULT_NO_MOTION_TIME;\n\n    var addDiscoveredDevice = function(device) {\n        var uuid = UUIDGen.generate(device.UDN);\n        var accessory;\n\n        if (device.deviceType === Wemo.DEVICE_TYPE.Bridge) {\n            var client = this.client(device , self.log);\n\n            client.getEndDevices(function (err, enddevices) {\n                for (var i = 0, tot = enddevices.length; i < tot; i++) {\n                    uuid = UUIDGen.generate(enddevices[i].deviceId);\n                    accessory = self.accessories[uuid];\n\n                    if (self.ignoredDevices.indexOf(device.serialNumber) !== -1) {\n                        if (accessory !== undefined) {\n                            self.removeAccessory(accessory);\n                        }\n\n                        return;\n                    }\n\n                    if (accessory === undefined) {\n                        self.addLinkAccessory(device, enddevices[i]);\n                    }\n                    else {\n                        self.accessories[uuid] = new WemoLinkAccessory(self.log, accessory, device, enddevices[i]);\n                    }\n                }\n            });\n        }\n        else {\n            accessory = self.accessories[uuid];\n\n            if (self.ignoredDevices.indexOf(device.serialNumber) !== -1) {\n                if (accessory !== undefined) {\n                    self.removeAccessory(accessory);\n                }\n\n                return;\n            }\n\n            if (accessory === undefined) {\n                self.addAccessory(device);\n            }\n            else if (accessory instanceof WemoAccessory) {\n                self.log(\"Online and can update device: %s [%s]\", accessory.displayName, device.macAddress);\n                accessory.setupDevice(device);\n                accessory.observeDevice(device);\n            }\n            else {\n                self.log(\"Online: %s [%s]\", accessory.displayName, device.macAddress);\n               self.accessories[uuid] = new WemoAccessory(self.log, accessory, device);\n            }\n        }\n    }\n\n    this.api.on('didFinishLaunching', function() {\n        wemo.discover(addDiscoveredDevice);\n    });\n\n    setInterval(\n        function(){\n            wemo.discover(addDiscoveredDevice);\n        },\n        30000\n    );\n}\n\nWemoPlatform.prototype.addAccessory = function(device) {\n    var serviceType;\n\n    switch(device.deviceType) {\n        case Wemo.DEVICE_TYPE.Insight:\n        case Wemo.DEVICE_TYPE.Switch:\n            serviceType = Service.Outlet;\n            break;\n        case Wemo.DEVICE_TYPE.LightSwitch:\n            serviceType = Service.Switch;\n            break;\n        case Wemo.DEVICE_TYPE.Motion:\n        case \"urn:Belkin:device:NetCamSensor:1\":\n            serviceType = Service.MotionSensor;\n            break;\n        case Wemo.DEVICE_TYPE.Maker:\n            serviceType = Service.Switch;\n            break;\n        default:\n            this.log(\"Not Supported: %s [%s]\", device.friendlyName, device.deviceType);\n    }\n\n    if (serviceType === undefined) {\n        return;\n    }\n\n    this.log(\"Found: %s [%s]\", device.friendlyName, device.macAddress);\n\n    var accessory = new Accessory(device.friendlyName, UUIDGen.generate(device.UDN));\n    var service = accessory.addService(serviceType, device.friendlyName);\n\n    switch(device.deviceType) {\n        case Wemo.DEVICE_TYPE.Insight:\n            //service.addCharacteristic(Characteristic.OutletInUse);\n            service.addCharacteristic(Consumption);\n            service.addCharacteristic(TotalConsumption);\n            break;\n    }\n\n    this.accessories[accessory.UUID] = new WemoAccessory(this.log, accessory, device);\n    this.api.registerPlatformAccessories(\"homebridge-platform-wemo\", \"BelkinWeMo\", [accessory]);\n}\n\nWemoPlatform.prototype.addLinkAccessory = function(link, device) {\n    this.log(\"Found: %s [%s]\", device.friendlyName, device.deviceId);\n\n    var accessory = new Accessory(device.friendlyName, UUIDGen.generate(device.deviceId));\n    accessory.addService(Service.Lightbulb, device.friendlyName).addCharacteristic(Characteristic.Brightness);\n\n    this.accessories[accessory.UUID] = new WemoLinkAccessory(this.log, accessory, link, device);\n    this.api.registerPlatformAccessories(\"homebridge-platform-wemo\", \"BelkinWeMo\", [accessory]);\n}\n\nWemoPlatform.prototype.configureAccessory = function(accessory) {\n    accessory.updateReachability(false);\n    this.accessories[accessory.UUID] = accessory;\n}\n\nWemoPlatform.prototype.configurationRequestHandler = function(context, request, callback) {\n    var self = this;\n    var respDict = {};\n\n    if (request && request.type === \"Terminate\") {\n        context.onScreen = null;\n    }\n\n    var sortAccessories = function() {\n        context.sortedAccessories = Object.keys(self.accessories).map(\n            function(k){return this[k] instanceof Accessory ? this[k] : this[k].accessory},\n            self.accessories\n        ).sort(function(a,b) {if (a.displayName < b.displayName) return -1; if (a.displayName > b.displayName) return 1; return 0});\n\n        return Object.keys(context.sortedAccessories).map(function(k) {return this[k].displayName}, context.sortedAccessories);\n    }\n\n    switch(context.onScreen) {\n        case \"DoRemove\":\n            if (request.response.selections) {\n                for (var i in request.response.selections.sort()) {\n                    this.removeAccessory(context.sortedAccessories[request.response.selections[i]]);\n                }\n\n                respDict = {\n                    \"type\": \"Interface\",\n                    \"interface\": \"instruction\",\n                    \"title\": \"Finished\",\n                    \"detail\": \"Accessory removal was successful.\"\n                }\n\n                context.onScreen = null;\n                callback(respDict);\n            }\n            else {\n                context.onScreen = null;\n                callback(respDict, \"platform\", true, this.config);\n            }\n            break;\n        case \"Menu\":\n            context.onScreen = \"Remove\";\n        case \"Remove\":\n            respDict = {\n                \"type\": \"Interface\",\n                \"interface\": \"list\",\n                \"title\": \"Select accessory to \" + context.onScreen.toLowerCase(),\n                \"allowMultipleSelection\": context.onScreen == \"Remove\",\n                \"items\": sortAccessories()\n            }\n\n            context.onScreen = \"Do\" + context.onScreen;\n            callback(respDict);\n            break;\n        default:\n            if (request && (request.response || request.type === \"Terminate\")) {\n                context.onScreen = null;\n                callback(respDict, \"platform\", true, this.config);\n            }\n            else {\n                respDict = {\n                    \"type\": \"Interface\",\n                    \"interface\": \"list\",\n                    \"title\": \"Select option\",\n                    \"allowMultipleSelection\": false,\n                    \"items\": [\"Remove Accessory\"]\n                }\n\n                context.onScreen = \"Menu\";\n                callback(respDict);\n            }\n    }\n}\n\nWemoPlatform.prototype.removeAccessory = function(accessory) {\n    this.log(\"Remove Accessory: %s\", accessory.displayName);\n\n    if (this.accessories[accessory.UUID]) {\n        delete this.accessories[accessory.UUID];\n    }\n\n    this.api.unregisterPlatformAccessories(\"homebridge-platform-wemo\", \"BelkinWeMo\", [accessory]);\n}\n\nfunction WemoAccessory(log, accessory, device) {\n    var self = this;\n\n    this.accessory = accessory;\n    this.device = device;\n    this.log = log;\n\n    this.setupDevice(device);\n    this.updateReachability(true);\n\n    this.accessory.getService(Service.AccessoryInformation)\n        .setCharacteristic(Characteristic.Manufacturer, \"Belkin WeMo\")\n        .setCharacteristic(Characteristic.Model, device.modelName)\n        .setCharacteristic(Characteristic.SerialNumber, device.serialNumber)\n        .setCharacteristic(Characteristic.FirmwareRevision, device.firmwareVersion);\n\n    this.accessory.on('identify', function(paired, callback) {\n        self.log(\"%s - identify\", self.accessory.displayName);\n        callback();\n    });\n\n    this.observeDevice(device);\n    this.addEventHandlers();\n}\n\n\nWemoAccessory.prototype.addEventHandler = function(serviceName, characteristic) {\n    serviceName = serviceName || Service.Switch;\n\n    var service = this.accessory.getService(serviceName);\n\n    if (service === undefined) {\n        serviceName = Service.Outlet;\n        service = this.accessory.getService(serviceName);\n    }\n\n    if (service === undefined) {\n        return;\n    }\n\n    if (service.testCharacteristic(characteristic) === false) {\n        return;\n    }\n\n    switch(characteristic) {\n        case Characteristic.On:\n            service\n                .getCharacteristic(characteristic)\n                .on('set', this.setSwitchState.bind(this));\n            break;\n        case Characteristic.TargetDoorState:\n            service\n                .getCharacteristic(characteristic)\n                .on('set', this.setTargetDoorState.bind(this));\n    }\n}\n\nWemoAccessory.prototype.addEventHandlers = function() {\n    this.addEventHandler(Service.Switch, Characteristic.On);\n    this.addEventHandler(Service.GarageDoorOpener, Characteristic.TargetDoorState);\n}\n\nWemoAccessory.prototype.getAttributes = function(callback) {\n    callback = callback || function() {};\n\n    this.client.getAttributes(function(err, attributes) {\n        if (err) {\n            this.log(err);\n            callback();\n            return;\n        }\n\n        this.device.attributes = attributes;\n\n        // SwitchMode - Momentary\n        if (attributes.SwitchMode == 1) {\n            if (this.accessory.getService(Service.GarageDoorOpener) === undefined) {\n                this.accessory.addService(Service.GarageDoorOpener, this.accessory.displayName);\n                this.addEventHandler(Service.GarageDoorOpener, Characteristic.TargetDoorState);\n            }\n\n            if (this.accessory.getService(Service.Switch) !== undefined) {\n                this.accessory.removeService(this.accessory.getService(Service.Switch));\n            }\n\n            if (this.accessory.getService(Service.ContactSensor) !== undefined) {\n                this.accessory.removeService(this.accessory.getService(Service.ContactSensor));\n            }\n        }\n        // SwitchMode - Toggle\n        else if (attributes.SwitchMode == 0) {\n            if (this.accessory.getService(Service.Switch) === undefined) {\n                this.accessory.addService(Service.Switch, this.accessory.displayName);\n                this.addEventHandler(Service.Switch, Characteristic.On);\n            }\n\n            if (this.accessory.getService(Service.GarageDoorOpener) !== undefined) {\n                this.accessory.removeService(this.accessory.getService(Service.GarageDoorOpener));\n            }\n        }\n\n        if (attributes.SensorPresent == 1) {\n            if (this.accessory.getService(Service.Switch) !== undefined) {\n                 if (this.accessory.getService(Service.ContactSensor) === undefined) {\n                     this.log(\"%s - Add Service: %s\", this.accessory.displayName, \"Service.ContactSensor\");\n                     this.accessory.addService(Service.ContactSensor, this.accessory.displayName);\n                 }\n            }\n            else if (this.accessory.getService(Service.GarageDoorOpener) !== undefined) {\n                this.sensorPresent = true;\n            }\n\n            this.updateSensorState(attributes.Sensor);\n        }\n        else {\n            var contactSensor = this.accessory.getService(Service.ContactSensor);\n\n            if (contactSensor !== undefined) {\n                this.log(\"%s - Remove Service: %s\", this.accessory.displayName, \"Service.ContactSensor\");\n                this.accessory.removeService(contactSensor);\n            }\n\n            delete this.sensorPresent;\n        }\n\n        if (this.accessory.getService(Service.Switch) !== undefined) {\n            this.updateSwitchState(attributes.Switch);\n        }\n\n        callback();\n    }.bind(this));\n}\n\nWemoAccessory.prototype.getSwitchState = function(callback) {\n    if (this.device.deviceType === Wemo.DEVICE_TYPE.Maker) {\n        this.getAttributes(function() {\n            callback(null, this.accessory.getService(Service.Switch).getCharacteristic(Characteristic.On).value);\n        }.bind(this));\n    }\n    else {\n        this.client.getBinaryState(function(err, state) {\n            if (err) {\n                var service = this.accessory.getService(Service.Switch) || this.accessory.getService(Service.Outlet);\n                callback(null, service.getCharacteristic(Characteristic.On).value);\n                return;\n            }\n\n            callback(null, this.updateSwitchState(state));\n        }.bind(this));\n    }\n}\n\nWemoAccessory.prototype.observeDevice = function(device) {\n    if (device.deviceType === Wemo.DEVICE_TYPE.Maker) {\n        this.getAttributes();\n\n        this.client.on('attributeList', function(name, value, prevalue, timestamp) {\n            switch(name) {\n                case 'Switch':\n                    if (this.accessory.getService(Service.Switch) !== undefined) {\n                        this.updateSwitchState(value);\n                    }\n                    else if (this.accessory.getService(Service.GarageDoorOpener) !== undefined) {\n                        if (value == 1) {\n                            // Triggered through HomeKit\n                            if (this.homekitTriggered === true) {\n                                delete this.homekitTriggered;\n                            }\n                            // Triggered using the button on the WeMo Maker\n                            else {                                \n                                var targetDoorState = this.accessory.getService(Service.GarageDoorOpener).getCharacteristic(Characteristic.TargetDoorState);\n                                var state = targetDoorState.value ? Characteristic.TargetDoorState.OPEN : Characteristic.TargetDoorState.CLOSED;\n                                this.log(\"%s - Set Target Door State: %s (triggered by Maker)\", this.accessory.displayName, (state ? \"Closed\" : \"Open\"));\n                                targetDoorState.updateValue(state);\n                                this.setDoorMoving(state);\n                            }\n                        }\n                    }\n                    break;\n                case 'Sensor':\n                    this.updateSensorState(value, true);\n                    break;\n            }\n        }.bind(this));\n    }\n    else {\n        this.client.on('binaryState', function(state) {\n            if (this.device.deviceType === Wemo.DEVICE_TYPE.Motion || this.device.deviceType === \"urn:Belkin:device:NetCamSensor:1\") {\n                this.updateMotionDetected(state);\n            }\n            else {\n                this.updateSwitchState(state);\n            }\n        }.bind(this));\n    }\n\n    if (device.deviceType === Wemo.DEVICE_TYPE.Insight) {\n        this.client.on('insightParams', this.updateInsightParams.bind(this));\n    }\n}\n\nWemoAccessory.prototype.setDoorMoving = function(targetDoorState, homekitTriggered) {\n    var service = this.accessory.getService(Service.GarageDoorOpener);\n\n    if (this.movingTimer) {\n        clearTimeout(this.movingTimer);\n        delete this.movingTimer;\n    }\n\n    if (this.isMoving === true) {\n        delete this.isMoving;\n        this.updateCurrentDoorState(Characteristic.CurrentDoorState.STOPPED);\n\n        // Toggle TargetDoorState after receiving a stop\n        setTimeout(\n            function(obj, state) {\n                obj.updateValue(state);\n            },\n            500,\n            service.getCharacteristic(Characteristic.TargetDoorState),\n            targetDoorState == Characteristic.TargetDoorState.OPEN ? Characteristic.TargetDoorState.CLOSED : Characteristic.TargetDoorState.OPEN\n        );\n        return;\n    }\n\n    this.isMoving = true;\n\n    if (homekitTriggered === true) {\n        var currentDoorState = service.getCharacteristic(Characteristic.CurrentDoorState);\n\n        if (targetDoorState == Characteristic.TargetDoorState.CLOSED) {\n            if (currentDoorState.value != Characteristic.CurrentDoorState.CLOSED) {\n                this.updateCurrentDoorState(Characteristic.CurrentDoorState.CLOSING);\n            }\n        }\n        else if (targetDoorState == Characteristic.TargetDoorState.OPEN) {\n            if ((this.sensorPresent !== true && currentDoorState.value != Characteristic.CurrentDoorState.OPEN) || currentDoorState.value == Characteristic.CurrentDoorState.STOPPED) {\n                this.updateCurrentDoorState(Characteristic.CurrentDoorState.OPENING);\n            }\n        }\n    }\n\n    this.movingTimer = setTimeout(function(self) {\n        delete self.movingTimer;\n        delete self.isMoving;\n\n        var targetDoorState = self.accessory.getService(Service.GarageDoorOpener).getCharacteristic(Characteristic.TargetDoorState);\n\n        if (self.sensorPresent !== true) {\n            self.updateCurrentDoorState(targetDoorState.value ? Characteristic.CurrentDoorState.CLOSED : Characteristic.CurrentDoorState.OPEN);\n            return;\n        }\n\n        self.getAttributes();\n    }, doorOpenTimer * 1000, this);\n}\n\nWemoAccessory.prototype.setSwitchState = function(state, callback) {\n    var value = state | 0;\n    var service = this.accessory.getService(Service.Switch) || this.accessory.getService(Service.Outlet);\n    var switchState = service.getCharacteristic(Characteristic.On);\n    callback = callback || function() {};\n\n    if (switchState.value != value) {  //remove redundent calls to setBinaryState when requested state is already achieved\n        this.client.setBinaryState(value, function (err) {\n            if(!err) {\n                this.log(\"%s - Set state: %s\", this.accessory.displayName, (value ? \"On\" : \"Off\"));\n                callback(null);\n            }\n            else {\n                this.log(\"%s - Set state FAILED: %s. Error: %s\", this.accessory.displayName, (value ? \"on\" : \"off\"), err.code);\n                callback(new Error(err));\n            }\n        }.bind(this));\n    }\n    else {\n        callback(null);\n    }\n}\n\nWemoAccessory.prototype.setTargetDoorState = function(state, callback) {\n    var value = state | 0;\n    callback = callback || function() {};\n\n    this.homekitTriggered = true;\n\n    var currentDoorState = this.accessory.getService(Service.GarageDoorOpener).getCharacteristic(Characteristic.CurrentDoorState);\n\n    if (this.isMoving !== true) {\n        if (value == Characteristic.TargetDoorState.CLOSED && currentDoorState.value == Characteristic.CurrentDoorState.CLOSED) {\n            this.log(\"Door already closed\");\n            callback(null);\n            return;\n        }\n        else if (value == Characteristic.TargetDoorState.OPEN && currentDoorState.value == Characteristic.CurrentDoorState.OPEN) {\n            this.log(\"Door already open\");\n            callback(null);\n            return;\n        }\n    }\n\n    this.client.setBinaryState(1, function (err) {\n        if(!err) {\n            this.log(\"%s - Set Target Door State: %s (triggered by HomeKit)\",\n                this.accessory.displayName,\n                (value ? \"Closed\" : \"Open\")\n            );\n\n            this.setDoorMoving(value, true);\n\n            callback(null);\n        }\n        else {\n            this.log(\"%s - Set state FAILED: %s. Error: %s\", this.accessory.displayName, (value ? \"on\" : \"off\"), err.code);\n            callback(new Error(err));\n        }\n    }.bind(this));\n}\n\nWemoAccessory.prototype.setupDevice = function(device) {\n    this.device = device;\n    this.client = wemo.client(device);\n\n    this.client.on('error', function(err) {\n        this.log('%s reported error %s', this.accessory.displayName, err.code);\n    }.bind(this));\n}\n\nWemoAccessory.prototype.updateConsumption = function(raw) {\n    var value = Math.round(raw / 1000);\n    var service = this.accessory.getService(Service.Switch) || this.accessory.getService(Service.Outlet);\n    var consumption = service.getCharacteristic(Consumption);\n\n    if (consumption.value !== value) {\n        this.log(\"%s - Consumption: %sw\", this.accessory.displayName, value);\n        consumption.setValue(value);\n    }\n\n    return value;\n}\n\nWemoAccessory.prototype.updateInsightParams = function(state, power, data) {\n    this.updateSwitchState(state);\n    this.updateOutletInUse(state);\n    this.updateConsumption(power);\n    this.updateTotalConsumption(data.TodayConsumed);\n}\n\nWemoAccessory.prototype.updateOutletInUse = function(state) {\n    state = state | 0;\n\n    var value = !!state;\n    var service = this.accessory.getService(Service.Switch) || this.accessory.getService(Service.Outlet);\n    var outletInUse = service.getCharacteristic(Characteristic.OutletInUse);\n\n    if (outletInUse.value !== value) {\n        this.log(\"%s - Outlet In Use: %s\", this.accessory.displayName, (value ? \"Yes\" : \"No\"));\n        outletInUse.setValue(value);\n    }\n\n    return value;\n}\n\nWemoAccessory.prototype.updateMotionDetected = function(state) {\n    state = state | 0;\n\n    var value = !!state;\n    var motionDetected = this.accessory.getService(Service.MotionSensor).getCharacteristic(Characteristic.MotionDetected);\n\n    if ((value === motionDetected.value && this.motionTimer === undefined) || (value === false && this.motionTimer)) {\n        return;\n    }\n\n    if (value === true || noMotionTimer == 0) {\n        if (this.motionTimer) {\n            this.log(\"%s - no motion timer stopped\", this.accessory.displayName);\n            clearTimeout(this.motionTimer);\n            delete this.motionTimer;\n        }\n\n        this.log(\"%s - Motion Sensor: %s\", this.accessory.displayName, (value ? \"Detected\" : \"Clear\"));\n        motionDetected.setValue(value);\n    }\n    else {\n        this.log(\"%s - no motion timer started [%d secs]\", this.accessory.displayName, noMotionTimer);\n        clearTimeout(this.motionTimer);\n        this.motionTimer = setTimeout(function(self) {\n            self.log(\"%s - Motion Sensor: Clear; no motion timer completed\", self.accessory.displayName);\n            self.accessory.getService(Service.MotionSensor).getCharacteristic(Characteristic.MotionDetected).setValue(false);\n            delete self.motionTimer;\n        }, noMotionTimer * 1000, this);\n    }\n}\n\nWemoAccessory.prototype.updateReachability = function(reachable) {\n    this.accessory.updateReachability(reachable);\n}\n\nWemoAccessory.prototype.updateCurrentDoorState = function(value, actualFeedback) {\n    var state;\n\n    switch(value) {\n        case Characteristic.CurrentDoorState.OPEN:\n            state = \"Open\";\n            break;\n        case Characteristic.CurrentDoorState.CLOSED:\n            state = \"Closed\";\n            break;\n        case Characteristic.CurrentDoorState.OPENING:\n            state = \"Opening\";\n            break;\n        case Characteristic.CurrentDoorState.CLOSING:\n            state = \"Closing\";\n            break;\n        case Characteristic.CurrentDoorState.STOPPED:\n            state = \"Stopped\";\n            break;\n    }\n\n    this.log(\"%s - Get Current Door State: %s\",\n        this.accessory.displayName,\n        state\n    );\n\n    this.accessory\n        .getService(Service.GarageDoorOpener)\n        .getCharacteristic(Characteristic.CurrentDoorState)\n        .updateValue(value);\n}\n\nWemoAccessory.prototype.updateSensorState = function(state, wasTriggered) {\n    state = state | 0;\n\n    var value = !state;\n\n    if (this.accessory.getService(Service.ContactSensor) !== undefined) {\n        var sensorState = this.accessory.getService(Service.ContactSensor).getCharacteristic(Characteristic.ContactSensorState);\n\n        if (sensorState.value !== value) {\n            this.log(\"%s - Sensor: %s\", this.accessory.displayName, (value ? \"Detected\" : \"Not detected\"));\n            sensorState.updateValue(value ?  Characteristic.ContactSensorState.CONTACT_DETECTED: Characteristic.ContactSensorState.CONTACT_NOT_DETECTED);\n        }\n    }\n    else if (this.accessory.getService(Service.GarageDoorOpener) !== undefined) {\n        var targetDoorState = this.accessory.getService(Service.GarageDoorOpener).getCharacteristic(Characteristic.TargetDoorState);\n\n        if (targetDoorState.value == Characteristic.TargetDoorState.OPEN) {\n            // Garage door's target state is OPEN and the garage door's current state is OPEN\n            if (value == Characteristic.CurrentDoorState.OPEN) {\n                if (this.isMoving !== true) {\n                    this.updateCurrentDoorState(Characteristic.CurrentDoorState.OPEN, true);\n                }\n                else {\n                    this.updateCurrentDoorState(Characteristic.CurrentDoorState.OPENING, true);\n                }\n            }\n            // Garage door's target state is OPEN, but the garage door's current state is CLOSED,\n            // it must have been triggered externally by a remote control\n            else if (value == Characteristic.CurrentDoorState.CLOSED) {\n                this.log(\"%s - Set Target Door State: Closed (triggered by External)\", this.accessory.displayName);\n                delete this.isMoving;\n                targetDoorState.updateValue(Characteristic.TargetDoorState.CLOSED);\n                this.updateCurrentDoorState(Characteristic.CurrentDoorState.CLOSED, true);\n            }\n        }\n        else if (targetDoorState.value == Characteristic.TargetDoorState.CLOSED) {\n            // Garage door's target state is CLOSED and the garage door's current state is CLOSED\n            if (value == Characteristic.CurrentDoorState.CLOSED) {\n                delete this.isMoving;\n\n                if (this.movingTimer) {\n                    clearTimeout(this.movingTimer);\n                    delete this.movingTimer;\n                }\n\n                this.updateCurrentDoorState(Characteristic.CurrentDoorState.CLOSED, true);\n            }\n            // Garage door's target state is CLOSED, but the garage door's current state is OPEN,\n            // it must have been triggered externally by a remote control\n            else if (value == Characteristic.CurrentDoorState.OPEN) {\n                this.log(\"%s - Set Target Door State: Open (triggered by External)\", this.accessory.displayName);\n                targetDoorState.updateValue(Characteristic.TargetDoorState.OPEN);\n\n                if (wasTriggered === true) {\n                    this.setDoorMoving(Characteristic.TargetDoorState.OPEN);\n                }\n            }\n        }\n    }\n\n    return value;\n}\n\nWemoAccessory.prototype.updateSwitchState = function(state) {\n    state = state | 0;\n\n    var value = !!state;\n    var service = this.accessory.getService(Service.Switch) || this.accessory.getService(Service.Outlet);\n    var switchState = service.getCharacteristic(Characteristic.On);\n\n    if (switchState.value !== value) {\n        this.log(\"%s - Get state: %s\", this.accessory.displayName, (value ? \"On\" : \"Off\"));\n        switchState.updateValue(value);\n\n        if(value === false && this.device.deviceType === Wemo.DEVICE_TYPE.Insight) {\n            this.updateOutletInUse(0);\n            this.updateConsumption(0);\n        }\n    }\n\n    return value;\n}\n\nWemoAccessory.prototype.updateTotalConsumption = function(raw) {\n    var value = Math.round(raw / 10000 * 6) / 100;\n    var service = this.accessory.getService(Service.Switch) || this.accessory.getService(Service.Outlet);\n    var totalConsumption = service.getCharacteristic(TotalConsumption);\n\n    if (totalConsumption.value !== value) {\n        this.log(\"%s - Total Consumption: %skwh\", this.accessory.displayName, value);\n        totalConsumption.updateValue(value);\n    }\n\n    return value;\n}\n\nfunction WemoLinkAccessory(log, accessory, link, device) {\n    var self = this;\n\n    this.accessory = accessory;\n    this.link = link;\n    this.device = device;\n    this.log = log;\n    this.client = wemo.client(link, log);\n\n    this.client.on('error', function(err) {\n        this.log('%s reported error %s', this.accessory.displayName, err.code);\n    }.bind(this));\n\n    this.updateReachability(false);\n\n    this.accessory.getService(Service.AccessoryInformation)\n        .setCharacteristic(Characteristic.Manufacturer, \"Belkin WeMo\")\n        .setCharacteristic(Characteristic.Model, \"Dimmable Bulb\")\n        .setCharacteristic(Characteristic.SerialNumber, device.deviceId);\n\n    this.accessory.on('identify', function(paired, callback) {\n        this.log(\"%s - Identify\", this.accessory.displayName);\n\n        var switchState = this.accessory.getService(Service.Lightbulb).getCharacteristic(Characteristic.On);\n        var count = 0;\n\n        if (switchState.value == true) {\n            setOff();\n        }\n        else {\n            setOn();\n        }\n\n        function setOn() {\n            switchState.setValue(true);\n            count++;\n\n            if (count == 6) {\n                callback();\n                return;\n            }\n\n            setTimeout(function() {\n                setOff();\n            }, 500);\n        }\n\n        function setOff() {\n            switchState.setValue(false);\n            count++;\n\n            if (count == 6) {\n                callback();\n                return;\n            }\n\n            setTimeout(function() {\n                setOn();\n            }, 750);\n        }\n    }.bind(this));\n\n    this.addEventHandlers();\n    this.getSwitchState();\n\n    // register eventhandler\n    this.client.on('statusChange', function(deviceId, capabilityId, value) {\n        if (this.device.deviceId !== deviceId){\n            return;\n        }\n\n        this.statusChange(deviceId, capabilityId, value);\n    }.bind(this));\n}\n\nWemoLinkAccessory.OPTIONS = {\n    Brightness: '10008',\n    Switch:     '10006'\n}\n\nWemoLinkAccessory.prototype.addEventHandler = function(characteristic) {\n    var service = this.accessory.getService(Service.Lightbulb)\n\n    if (service.testCharacteristic(characteristic) === false) {\n        return;\n    }\n\n    switch(characteristic) {\n        case Characteristic.On:\n            service\n                .getCharacteristic(Characteristic.On)\n                .on('set', this.setSwitchState.bind(this));\n            break;\n        case Characteristic.Brightness:\n            service\n                .getCharacteristic(Characteristic.Brightness)\n                .on('set', this.setBrightness.bind(this));\n            break;\n    }\n}\n\nWemoLinkAccessory.prototype.addEventHandlers = function () {\n    this.addEventHandler(Characteristic.On);\n    this.addEventHandler(Characteristic.Brightness);\n}\n\nWemoLinkAccessory.prototype.getSwitchState = function(callback) {\n    callback = callback || function() {};\n\n    this.client.getDeviceStatus(this.device.deviceId, function(err, capabilities) {\n        if(err) {\n            callback(null);\n            return;\n        }\n\n        if (capabilities[WemoLinkAccessory.OPTIONS.Switch] === undefined || !capabilities[WemoLinkAccessory.OPTIONS.Switch].length) { // we've get no data in the capabilities array, so it's off\n            this.log(\"Offline: %s [%s]\", this.accessory.displayName, this.device.deviceId);\n            this.updateReachability(false);\n            callback(null);\n            return;\n        }\n\n        this.log(\"Online: %s [%s]\", this.accessory.displayName, this.device.deviceId);\n\n        var value = this.updateSwitchState(capabilities[WemoLinkAccessory.OPTIONS.Switch]);\n        this.updateBrightness(capabilities[WemoLinkAccessory.OPTIONS.Brightness]);\n        this.updateReachability(true);\n        callback(null, value);\n    }.bind(this));\n}\n\nWemoLinkAccessory.prototype.setBrightness = function(value, callback) {\n    callback = callback || function() {};\n\n    if (this.brightness == value) {\n        callback(null);\n        return;\n    }\n\n    this._brightness = value;\n\n    //defer the actual update to smooth out changes from sliders\n    setTimeout(function(caller, value) {\n        //check that we actually have a change to make and that something\n        //hasn't tried to update the brightness again in the last 0.1 seconds\n        if (caller.brightness !== value && caller._brightness == value) {\n            caller.client.setDeviceStatus(caller.device.deviceId, 10008, value * 255 / 100, function(err, response) {\n                caller.log(\"%s - Set brightness: %s%\", caller.accessory.displayName, value);\n                caller.brightness = value;\n            }.bind(caller));\n        }\n    }, 100, this, value);\n\n    callback(null);\n}\n\nWemoLinkAccessory.prototype.setSwitchState = function(state, callback) {\n    var value = state | 0;\n    var switchState = this.accessory.getService(Service.Lightbulb).getCharacteristic(Characteristic.On);\n    callback = callback || function() {};\n\n    if(switchState.value == value) {\n        callback(null);\n        return;\n    }\n\n    this.log(\"%s - Set state: %s\", this.accessory.displayName, (value ? \"On\" : \"Off\"));\n    this.client.setDeviceStatus(this.device.deviceId, WemoLinkAccessory.OPTIONS.Switch, value, function(err, response) {\n        this.device.capabilities[WemoLinkAccessory.OPTIONS.Switch] = value;\n        callback(null);\n    }.bind(this));\n}\n\nWemoLinkAccessory.prototype.statusChange = function(deviceId, capabilityId, value) {\n    if (this.accessory.reachable === false) {\n        this.updateReachability(true);\n    }\n\n    if (this.device.capabilities[capabilityId] == value) {\n        return;\n    }\n\n    this.device.capabilities[capabilityId] = value;\n\n    switch(capabilityId) {\n        case WemoLinkAccessory.OPTIONS.Brightness:\n            this.updateBrightness(value);\n            break;\n        case WemoLinkAccessory.OPTIONS.Switch:\n            this.updateSwitchState(value);\n            break;\n        default:\n            this.log(\"This capability (%s) not implemented\", capabilityId);\n    }\n}\n\nWemoLinkAccessory.prototype.updateBrightness = function(capability) {\n    var value = Math.round(capability.split(':').shift() * 100 / 255 );\n    var brightness = this.accessory.getService(Service.Lightbulb).getCharacteristic(Characteristic.Brightness);\n\n    if (brightness.value != value) {\n        this.log(\"%s - Get brightness: %s%\", this.accessory.displayName, value);\n        brightness.updateValue(value);\n        this.brightness = value;\n    }\n\n    return value;\n}\n\nWemoLinkAccessory.prototype.updateReachability = function(reachable) {\n    this.accessory.updateReachability(reachable);\n}\n\nWemoLinkAccessory.prototype.updateSwitchState = function(state) {\n    state = state | 0;\n\n    var value = !!state;\n    var switchState = this.accessory.getService(Service.Lightbulb).getCharacteristic(Characteristic.On);\n\n    if (switchState.value != value) {\n        this.log(\"%s - Get state: %s\", this.accessory.displayName, (value ? \"On\" : \"Off\"));\n        switchState.updateValue(value);\n    }\n\n    return value;\n}\n"}